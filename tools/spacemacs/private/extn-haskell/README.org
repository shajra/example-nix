#+TITLE: Extn-Haskell Spacemacs Layer
#+SETUPFILE: ../../../../support/links.org

* About Extn-Haskell Spacemacs Layer

  This layer extends the Spacemacs-provided =haskell= layer, but fully commits
  to integration with [[dante][Dante]] disabling competing/redundant support for [[ghc-mod][ghc-mod]],
  and [[intero][Intero]]. Although Dante has less support for some features like completion
  and navigating references it has some benefits:

  - Tools like Intero obligate projects to work with Stack.  This makes
    integration with projects not using Stack (say using only Cabal or Nix)
    more tedious. Dante still supports Stack, but optionally if a =stack.yaml=
    is detected.

  - Dante delegates much more to GHC/GHCi, and thus has a much easier time
    keeping up with later releases of GHC.

  Here's a summary of the features provided by this layer:

  - major-mode key bindings and hooks to enable Dante for Haskell files layering
    on top of the key bindings already provided by the Spacemacs =haskell=
    layer

  - simplified layer-based configuration of Dante including:

    - easier configuration of Dante project types and detection

    - Flycheck Hlint integration

    - control to enable/disable Dante's Xref backend

    - exclusion of Dante from buffers matching a regular expression

    - GHC flags for the GHCi sessions Dante spawns

  - [[emacs-direnv][emacs-direnv]]/[[direnv][Direnv]] integration for per-project discovery of Cabal/GHC
    binaries.

  - function to allow specifying useful directory-local variables like
    ~dante-target~.

  Some features come from the Spacemacs =haskell= layer this layer extends
  including:

  - syntax highlighting (as one would expect)
  - support for literate Haskell files (bird-track and LaTeX styles)
  - a package/dependency-loaded GHCi interactive buffer
  - HLint refactoring/fixing
  - Hoogle/Hayoo documentation lookup
  - [[stylish-haskell][Stylish-Haskell]] formatting

  Finally, here's a few things that are lacking that hopefully might improve in
  the future:

  - [[dante-issue-completion][Dante's completion support is lacking]]
  - [[dante-issue-xref][Dante's Xref support is finicky]]
  - Emacs-based debugging support is fragile/broken, especially with newer GHC
    versions

* Installation

** Dependencies

   Beyond the normal build tools for a Haskell project (GHC, Cabal, Stack,
   etc.) to use this layer fully you may want the following executables (all
   are Haskell applications distributed on Hackage):

   - =apply-refact= (required by ~hlint-refactor~)
   - =hlint= (required by ~hlint-refactor~)
   - =stylish-haskell= (optional for ~haskell-mode~)
   - =hasktags= (optional for Xref)
   - =hoogle= (optional for ~haskell-mode~ and ~helm-hoogle~)

   We want our development experiences to be stable and portable from machine
   to machine, so it's nice to have project-level Nix expressions provide
   project-level dependencies. [[../../../../pkgs-make/README.org][Pkgs-make]] can do this by providing all the
   dependencies listed above for a =nix-shell= session. Nix shell environment
   variables can be integrated into Direnv with the [[../../../direnv/README.org][Direnv support provided]] as
   well as [[../../../oh-my-zsh/README.org][Oh-My-ZSH integration]]. To tie this back to Spacemacs, you can use
   the [[../direnv/README.org][provided =direnv= Spacemacs layer]].

   Otherwise, you can install these dependencies using Cabal, Stack, or an OS
   package manager like Nix.

** Enabling the layer

   To use this configuration layer, copy or link this layer's =extn-haskell=
   directory to the private layers directory of your Spacemacs installation
   keeping the name (=~/.emacs.d/private/extn-haskell=).

   Then enable it in your =~/.spacemacs=:

   #+BEGIN_SRC emacs-lisp :eval no
     (defun dotspacemacs/layers ()
       (setq-default
          ;; ... other configuration ...
        dotspacemacs-configuration-layers
          '( ; ... other layers
            (extn-haskell :variables
             ;; layer settings in pairs; for example...
             extn-haskell/dante-flycheck-hlint-enable t
             extn-haskell/dante-repl-types '(stack-alt new-alt)
             extn-haskell/dante-xref-enable nil))))
   #+END_SRC

* Features/Configuration

** Layer configuration

   The follow layer settings are supported with the =:variables= keyword when
   enabling the layer:

   - ~extn-haskell/dante-exclude-regexes~
   - ~extn-haskell/dante-flycheck-hlint-enable~
   - ~extn-haskell/dante-flycheck-hlint-level~
   - ~extn-haskell/dante-load-flags-extra~
   - ~extn-haskell/dante-repl-types~
   - ~extn-haskell/dante-xref-enable~

   See [[./config.el][their definitions/docstrings]] for more details on these options.

** Key bindings

*** From the =haskell= Spacemacs layer

    Many keys bind from the ~haskell= layer. Rather than redocument those
    bindings here, see the [[spacemacs-haskell-bindings][documentation for that layer]]. Note that because this
    layer disables Intero and ghc-mod support, key bindings for those won't be
    available.

*** From this layer

    Dante-specific commands are prefixed by ~SPC m ,~

    | Key Binding | Command                      | Description                                     |
    |-------------+------------------------------+-------------------------------------------------|
    | ~SPC m , "~ | ~dante-eval-block~           | evaluate comment line of the form “-- >>> expr” |
    | ~SPC m , .~ | ~dante-info~                 | GHCi :info for the expression at the point      |
    | ~SPC m , ,~ | ~dante-type-at~              | GHCi :type for the expression at the point      |
    | ~SPC m , f~ | ~dante-auto-fix~             | attempt to repair a Haskell defect at the point |
    | ~SPC m , r~ | ~extn-haskell/dante-restart~ | restart Dante GHCi process                      |
    | ~SPC m , d~ | ~dante-diagnose~             | diagnose Dante in =*Help*= buffer               |

    See the [[dante][Dante documentation]] for more information.
